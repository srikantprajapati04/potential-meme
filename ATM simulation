import sqlite3

# Database setup
def setup_database():
    conn = sqlite3.connect('atm_simulation.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT UNIQUE NOT NULL,
            card_no TEXT UNIQUE NOT NULL,
            pin TEXT NOT NULL,
            balance REAL DEFAULT 0.0
        )
    ''')
    conn.commit()
    conn.close()

# User registration
def register_user():
    conn = sqlite3.connect('atm_simulation.db')
    cursor = conn.cursor()
    try:
        username = input("Enter your username: ")
        card_no = input("Enter your 5-digit card number: ")
        if len(card_no) != 5 or not card_no.isdigit():
            print("Invalid card number. Must be 5 digits.")
            return
        
        pin = input("Create your 4-digit PIN: ")
        if len(pin) != 4 or not pin.isdigit():
            print("PIN must be 4 digits.")
            return
        
        confirm_pin = input("Confirm your 4-digit PIN: ")
        if pin != confirm_pin:
            print("PINs do not match!")
            return
            
        cursor.execute('INSERT INTO users (username, card_no, pin) VALUES (?, ?, ?)', (username, card_no, pin))
        conn.commit()
        print("User registered successfully!")
    except sqlite3.IntegrityError:
        print("Username or card number already exists.")
    finally:
        conn.close()

# User login
def login_user():
    card_no = input("Enter your 5-digit card number: ")
    pin = input("Enter your 4-digit PIN: ")
    
    conn = sqlite3.connect('atm_simulation.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users WHERE card_no = ? AND pin = ?', (card_no, pin))
    user = cursor.fetchone()
    conn.close()
    return user

# View balance
def view_balance(user_id):
    conn = sqlite3.connect('atm_simulation.db')
    cursor = conn.cursor()
    cursor.execute('SELECT balance FROM users WHERE id = ?', (user_id,))
    balance = cursor.fetchone()[0]
    conn.close()
    return balance

# Deposit funds
def deposit(user_id):
    try:
        amount = float(input("Enter amount to deposit: $"))
        if amount <= 0:
            print("Amount must be positive.")
            return
            
        conn = sqlite3.connect('atm_simulation.db')
        cursor = conn.cursor()
        cursor.execute('UPDATE users SET balance = balance + ? WHERE id = ?', (amount, user_id))
        conn.commit()
        conn.close()
        print(f"Deposited ${amount:.2f} successfully!")
    except ValueError:
        print("Invalid amount. Please enter a number.")

# Withdraw funds
def withdraw(user_id):
    try:
        amount = float(input("Enter amount to withdraw: $"))
        if amount <= 0:
            print("Amount must be positive.")
            return
            
        conn = sqlite3.connect('atm_simulation.db')
        cursor = conn.cursor()
        cursor.execute('SELECT balance FROM users WHERE id = ?', (user_id,))
        balance = cursor.fetchone()[0]
        
        if amount > balance:
            print("Insufficient funds!")
        else:
            cursor.execute('UPDATE users SET balance = balance - ? WHERE id = ?', (amount, user_id))
            conn.commit()
            print(f"Withdrew ${amount:.2f} successfully!")
        
        conn.close()
    except ValueError:
        print("Invalid amount. Please enter a number.")

# Change PIN
def change_pin(user_id):
    conn = sqlite3.connect('atm_simulation.db')
    cursor = conn.cursor()
    
    current_pin = input("Enter your current 4-digit PIN: ")
    cursor.execute('SELECT pin FROM users WHERE id = ?', (user_id,))
    actual_pin = cursor.fetchone()[0]
    
    if current_pin != actual_pin:
        print("Incorrect current PIN!")
        return
    
    new_pin = input("Enter new 4-digit PIN: ")
    if len(new_pin) != 4 or not new_pin.isdigit():
        print("PIN must be 4 digits.")
        return
        
    confirm_pin = input("Confirm new 4-digit PIN: ")
    if new_pin != confirm_pin:
        print("PINs do not match!")
        return
    
    cursor.execute('UPDATE users SET pin = ? WHERE id = ?', (new_pin, user_id))
    conn.commit()
    conn.close()
    print("PIN changed successfully!")

# ATM operations menu
def atm_operations(user):
    user_id = user[0]
    username = user[1]
    
    while True:
        print(f"\nWelcome, {username}!")
        print("\nATM Options:")
        print("1. Check Balance")
        print("2. Deposit Money")
        print("3. Withdraw Money")
        print("4. Change PIN")
        print("5. Exit")
        
        choice = input("Enter your choice (1-5): ")
        
        if choice == '1':
            balance = view_balance(user_id)
            print(f"\nYour current balance is: ${balance:.2f}")
        elif choice == '2':
            deposit(user_id)
        elif choice == '3':
            withdraw(user_id)
        elif choice == '4':
            change_pin(user_id)
        elif choice == '5':
            print("Thank you for using our ATM. Goodbye!")
            break
        else:
            print("Invalid choice. Please try again.")

# Main ATM simulation
def atm_simulation():
    setup_database()
    
    while True:
        print("\nATM Simulation System")
        print("1. Register New Account")
        print("2. Login with Card")
        print("3. Exit")
        
        option = input("Select an option (1-3): ")
        
        if option == '1':
            register_user()
        elif option == '2':
            user = login_user()
            if user:
                atm_operations(user)
            else:
                print("Invalid card number or PIN. Please try again.")
        elif option == '3':
            print("Thank you for using our ATM system. Goodbye!")
            break
        else:
            print("Invalid option. Please try again.")

if __name__ == "__main__":
    atm_simulation()
